/*
Copyright 2024 The Dapr Authors
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
    http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package dapr.proto.internals.v1;

import "google/protobuf/timestamp.proto";
import "dapr/proto/runtime/v1/dapr.proto";


option go_package = "github.com/dapr/dapr/pkg/proto/internals/v1;internals";

//do I need this?
// daprd sidecar -> app communication
service JobCallback {
  rpc TriggerJob(TriggerJobRequest) returns (TriggerJobResponse);
}

// TriggerJobRequest is the message request to convey that the job is at its 'trigger' time.
message TriggerJobRequest {
  // The job name to be triggered.
//  string job_name = 1;
  runtime.v1.Job job = 1;

  // Namespace of the job
  string namespace = 2;

  // The metadata associated with the job.
  // This can contain the generated `key` for the optional state store when the daprd sidecar needs to lookup the entire data from a state store.
  // The sidecar will use the metadata in order to know whether this job is registered for an actor. This is needed, as the routing mechanism for actors is different for the callback.
  map<string,string> metadata = 3;
}

message TriggerJobResponse {
  // Empty as of now.
}