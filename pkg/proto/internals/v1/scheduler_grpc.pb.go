// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: dapr/proto/internals/v1/scheduler.proto

package internals

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JobCallbackClient is the client API for JobCallback service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JobCallbackClient interface {
	TriggerJob(ctx context.Context, in *TriggerJobRequest, opts ...grpc.CallOption) (*TriggerJobResponse, error)
}

type jobCallbackClient struct {
	cc grpc.ClientConnInterface
}

func NewJobCallbackClient(cc grpc.ClientConnInterface) JobCallbackClient {
	return &jobCallbackClient{cc}
}

func (c *jobCallbackClient) TriggerJob(ctx context.Context, in *TriggerJobRequest, opts ...grpc.CallOption) (*TriggerJobResponse, error) {
	out := new(TriggerJobResponse)
	err := c.cc.Invoke(ctx, "/dapr.proto.internals.v1.JobCallback/TriggerJob", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobCallbackServer is the server API for JobCallback service.
// All implementations should embed UnimplementedJobCallbackServer
// for forward compatibility
type JobCallbackServer interface {
	TriggerJob(context.Context, *TriggerJobRequest) (*TriggerJobResponse, error)
}

// UnimplementedJobCallbackServer should be embedded to have forward compatible implementations.
type UnimplementedJobCallbackServer struct {
}

func (UnimplementedJobCallbackServer) TriggerJob(context.Context, *TriggerJobRequest) (*TriggerJobResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerJob not implemented")
}

// UnsafeJobCallbackServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JobCallbackServer will
// result in compilation errors.
type UnsafeJobCallbackServer interface {
	mustEmbedUnimplementedJobCallbackServer()
}

func RegisterJobCallbackServer(s grpc.ServiceRegistrar, srv JobCallbackServer) {
	s.RegisterService(&JobCallback_ServiceDesc, srv)
}

func _JobCallback_TriggerJob_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerJobRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobCallbackServer).TriggerJob(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dapr.proto.internals.v1.JobCallback/TriggerJob",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobCallbackServer).TriggerJob(ctx, req.(*TriggerJobRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// JobCallback_ServiceDesc is the grpc.ServiceDesc for JobCallback service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JobCallback_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dapr.proto.internals.v1.JobCallback",
	HandlerType: (*JobCallbackServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TriggerJob",
			Handler:    _JobCallback_TriggerJob_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dapr/proto/internals/v1/scheduler.proto",
}
